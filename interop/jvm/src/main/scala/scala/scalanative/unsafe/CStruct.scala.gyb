package scala.scalanative.unsafe

import scala.annotation.tailrec
import scala.scalanative.runtime.RawPtr
import scala.language.experimental.macros
import scala.reflect.macros.blackbox

sealed abstract class CStruct

protected[unsafe] class CStructMacroImpl(val c: blackbox.Context) extends MacroTools {
  import c.universe._


  % for N in range(1,24):
  def _${N}[T: c.WeakTypeTag]: c.Tree = genFieldGetter(c.prefix,${N-1})
  def _${N}_=[T: c.WeakTypeTag](v: c.Tree): c.Tree = genFieldSetter(c.prefix,${N-1},v)
  % end
  

}

% for N in range(0, 23):
%    Ts = "" if N == 0 else "[" + ", ".join("T" + str(i) for i in range(1, N + 1)) + "]"
%    underscores = "" if N == 0 else "[" + ", ".join("_" for i in range(0, N)) + "]"

final class CStruct${N}${Ts}(val raw: RawPtr) extends CStruct {
  % for F in range(1, N+1):
  def _${F}: T${F} = macro CStructMacroImpl._${F}[T${F}]
  def _${F}_=(v: T${F}): Unit = macro CStructMacroImpl._${F}_=[T${F}]
  % end
}

% end
